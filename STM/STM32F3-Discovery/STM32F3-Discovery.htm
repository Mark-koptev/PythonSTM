<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F3-Discovery\STM32F3-Discovery.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F3-Discovery\STM32F3-Discovery.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Dec 25 17:54:36 2022
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
menu_state_start &rArr; menu_draw_buttons &rArr; draw_button &rArr; prein_ascii &rArr; lcd_set_pixel
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[b3]">snake_clear_previous</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b3]">snake_clear_previous</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[44]">ADC4_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f3xx_it.o(i.BusFault_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[1f]">CAN_RX1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[20]">CAN_SCE_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[45]">COMP1_2_3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[46]">COMP4_5_6_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[47]">COMP7_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[40]">DMA2_Channel2_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[41]">DMA2_Channel3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[42]">DMA2_Channel4_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[43]">DMA2_Channel5_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f3xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f3xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[12]">EXTI2_TSC_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[4b]">FPU_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f3xx_it.o(i.HardFault_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f3xx_it.o(i.MemManage_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f3xx_it.o(i.NMI_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f3xx_it.o(i.PendSV_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3a]">SPI3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f3xx_it.o(i.SVC_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f3xx_it.o(i.SysTick_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_stm32f3xx.o(i.SystemInit) referenced from startup_stm32f303xc.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f3xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3d]">TIM6_DAC_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3e]">TIM7_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3b]">UART4_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[3c]">UART5_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f3xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[4a]">USBWakeUp_RMP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN_TX_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[48]">USB_HP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN_RX0_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[49]">USB_LP_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f3xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f303xc.o(.text) referenced from startup_stm32f303xc.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f303xc.o(.text)
 <LI><a href="#[55]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[91]">change_state</a> from statesystem.o(i.change_state) referenced from statesystem.o(i.change_state)
 <LI><a href="#[4f]">cnt1ms</a> from systickms.o(i.cnt1ms) referenced from systickms.o(i.Init_systickms)
 <LI><a href="#[51]">delayms</a> from systickms.o(i.delayms) referenced from systickms.o(i.Init_systickms)
 <LI><a href="#[67]">example_state_changer</a> from examplestate.o(i.example_state_changer) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[66]">example_state_input</a> from examplestate.o(i.example_state_input) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[68]">example_state_start</a> from examplestate.o(i.example_state_start) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[69]">example_state_update</a> from examplestate.o(i.example_state_update) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[54]">fputc</a> from retarget_io.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[65]">g_over_state</a> from gameoverstate.o(i.g_over_state) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[63]">g_over_state_changer</a> from gameoverstate.o(i.g_over_state_changer) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[62]">g_over_state_input</a> from gameoverstate.o(i.g_over_state_input) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[64]">g_over_state_start</a> from gameoverstate.o(i.g_over_state_start) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[4c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[57]">menu_button_left_level</a> from menustate.o(i.menu_button_left_level) referenced from menustate.o(i.menu_init_buttons)
 <LI><a href="#[59]">menu_button_level</a> from menustate.o(i.menu_button_level) referenced from menustate.o(i.menu_init_buttons)
 <LI><a href="#[58]">menu_button_right_level</a> from menustate.o(i.menu_button_right_level) referenced from menustate.o(i.menu_init_buttons)
 <LI><a href="#[56]">menu_button_start_play</a> from menustate.o(i.menu_button_start_play) referenced from menustate.o(i.menu_init_buttons)
 <LI><a href="#[61]">menu_state</a> from menustate.o(i.menu_state) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[5f]">menu_state_changer</a> from menustate.o(i.menu_state_changer) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[5e]">menu_state_input</a> from menustate.o(i.menu_state_input) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[60]">menu_state_start</a> from menustate.o(i.menu_state_start) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[50]">readcounter</a> from systickms.o(i.readcounter) referenced from systickms.o(i.Init_systickms)
 <LI><a href="#[52]">readflag25ms</a> from systickms.o(i.readflag25ms) referenced from systickms.o(i.Init_systickms)
 <LI><a href="#[53]">readflag50ms</a> from systickms.o(i.readflag50ms) referenced from systickms.o(i.Init_systickms)
 <LI><a href="#[5d]">snake_movement_state</a> from snakemovementstate.o(i.snake_movement_state) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[5b]">snake_movement_state_changer</a> from snakemovementstate.o(i.snake_movement_state_changer) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[5a]">snake_movement_state_input</a> from snakemovementstate.o(i.snake_movement_state_input) referenced from statesystem.o(i.state_system_init)
 <LI><a href="#[5c]">snake_movement_state_start</a> from snakemovementstate.o(i.snake_movement_state_start) referenced from statesystem.o(i.state_system_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[77]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[c5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[c8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[c9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USBWakeUp_RMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f303xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_number
</UL>

<P><STRONG><a name="[ca]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASCIICode
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_lcd_init
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[94]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_level_step
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init_buttons
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_message
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_button
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_squeak_hz
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_squeak_hz
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_squeak_hz
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_squeak_hz
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[d1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[70]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[d4]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>CreateButton</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, button.o(i.CreateButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CreateButton &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init_buttons
</UL>

<P><STRONG><a name="[7a]"></a>CreateState</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, states.o(i.CreateState))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CreateState &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_system_init
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>GetASCIICode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, asciilib.o(i.GetASCIICode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetASCIICode
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prein_ascii
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>ITM_SendChar</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, retarget_io.o(i.ITM_SendChar))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[7d]"></a>Init_display</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, display.o(i.Init_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Init_display &rArr; init_lcd_ili9325 &rArr; lcd_fill_color &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_color
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd_ili9325
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>Init_keypad</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, keypad.o(i.Init_keypad))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>Init_systickms</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, systickms.o(i.Init_systickms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Init_systickms &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>LL_GPIO_Init</STRONG> (Thumb, 324 bytes, Stack size 20 bytes, stm32f3xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_lcd_init
</UL>

<P><STRONG><a name="[84]"></a>LL_Init1msTick</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f3xx_ll_utils.o(i.LL_Init1msTick))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[85]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f3xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f3xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SystemClock_Config</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemClock_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, system_stm32f3xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_systickms
</UL>

<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_stm32f3xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f3xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f303xc.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d7]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[92]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_state
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_system_update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_system_input
</UL>

<P><STRONG><a name="[88]"></a>__0sprintf$1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d8]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[80]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_score_changed
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_state_start
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_over_state_start
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_display
</UL>

<P><STRONG><a name="[d9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[da]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[db]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[8a]"></a>apple_create</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, applegenerator.o(i.apple_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = apple_create &rArr; draw_image &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_image
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_number
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_in_snake
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state
</UL>

<P><STRONG><a name="[8c]"></a>apple_in_snake</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, applegenerator.o(i.apple_in_snake))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = apple_in_snake
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_create
</UL>

<P><STRONG><a name="[b8]"></a>apple_is_eaten</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, applegenerator.o(i.apple_is_eaten))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state
</UL>

<P><STRONG><a name="[91]"></a>change_state</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, statesystem.o(i.change_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = change_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_system_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.change_state)
</UL>
<P><STRONG><a name="[9b]"></a>color</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, draw.o(i.color))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_start
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_state_start
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_over_state_start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_color
</UL>

<P><STRONG><a name="[93]"></a>draw_button</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, draw.o(i.draw_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = draw_button &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prein_ascii
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_pixel
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw_buttons
</UL>

<P><STRONG><a name="[8d]"></a>draw_image</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, draw.o(i.draw_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = draw_image &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_color
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wall_generate_map
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_update
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_grow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_draw
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_create
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_score_changed
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_state_start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_clear_previous
</UL>

<P><STRONG><a name="[98]"></a>draw_message</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, draw.o(i.draw_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = draw_message &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prein_ascii
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_score_changed
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_state_start
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_over_state_start
</UL>

<P><STRONG><a name="[67]"></a>example_state_changer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, examplestate.o(i.example_state_changer))
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[66]"></a>example_state_input</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, examplestate.o(i.example_state_input))
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[68]"></a>example_state_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, examplestate.o(i.example_state_start))
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[69]"></a>example_state_update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, examplestate.o(i.example_state_update))
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[99]"></a>fill_screen</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, draw.o(i.fill_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fill_screen &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_start
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_state_start
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_over_state_start
</UL>

<P><STRONG><a name="[54]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, retarget_io.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fputc &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[8e]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_free_mem
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_create
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_color
</UL>

<P><STRONG><a name="[65]"></a>g_over_state</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gameoverstate.o(i.g_over_state))
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[63]"></a>g_over_state_changer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gameoverstate.o(i.g_over_state_changer))
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[62]"></a>g_over_state_input</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gameoverstate.o(i.g_over_state_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = g_over_state_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[64]"></a>g_over_state_start</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, gameoverstate.o(i.g_over_state_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = g_over_state_start &rArr; draw_message &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_screen
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_message
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[9c]"></a>gpio_lcd_init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lcd_ili9325.o(i.gpio_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gpio_lcd_init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd_ili9325
</UL>

<P><STRONG><a name="[97]"></a>img_color</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, draw.o(i.img_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = img_color
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_image
</UL>

<P><STRONG><a name="[7e]"></a>init_lcd_ili9325</STRONG> (Thumb, 564 bytes, Stack size 16 bytes, lcd_ili9325.o(i.init_lcd_ili9325))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = init_lcd_ili9325 &rArr; lcd_fill_color &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_color
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_lcd_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bus_test
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_reg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_lcd_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_display
</UL>

<P><STRONG><a name="[a8]"></a>keypad_poll</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, keypad.o(i.keypad_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = keypad_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>lcd_fill_color</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, lcd_ili9325.o(i.lcd_fill_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lcd_fill_color &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_reg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_lcd_write_words
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd_ili9325
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_display
</UL>

<P><STRONG><a name="[95]"></a>lcd_set_pixel</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lcd_ili9325.o(i.lcd_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_screen
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_image
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_button
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prein_ascii
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = main &rArr; Init_display &rArr; init_lcd_ili9325 &rArr; lcd_fill_color &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_system_update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_system_input
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_system_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypad_poll
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_systickms
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_keypad
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_display
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[79]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateButton
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init_buttons
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wall_initialize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_positions
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_grow
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_create
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_color
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_system_init
</UL>

<P><STRONG><a name="[57]"></a>menu_button_left_level</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menustate.o(i.menu_button_left_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = menu_button_left_level &rArr; menu_level_step &rArr; menu_draw_buttons &rArr; draw_button &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_level_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menustate.o(i.menu_init_buttons)
</UL>
<P><STRONG><a name="[59]"></a>menu_button_level</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menustate.o(i.menu_button_level))
<BR>[Address Reference Count : 1]<UL><LI> menustate.o(i.menu_init_buttons)
</UL>
<P><STRONG><a name="[58]"></a>menu_button_right_level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menustate.o(i.menu_button_right_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = menu_button_right_level &rArr; menu_level_step &rArr; menu_draw_buttons &rArr; draw_button &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_level_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menustate.o(i.menu_init_buttons)
</UL>
<P><STRONG><a name="[56]"></a>menu_button_start_play</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menustate.o(i.menu_button_start_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menu_button_start_play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menustate.o(i.menu_init_buttons)
</UL>
<P><STRONG><a name="[ab]"></a>menu_draw_buttons</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, menustate.o(i.menu_draw_buttons))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = menu_draw_buttons &rArr; draw_button &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init_buttons
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_button
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select_button_by_step
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_level_step
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_state_start
</UL>

<P><STRONG><a name="[ac]"></a>menu_init_buttons</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, menustate.o(i.menu_init_buttons))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = menu_init_buttons &rArr; CreateButton &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateButton
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw_buttons
</UL>

<P><STRONG><a name="[aa]"></a>menu_level_step</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, menustate.o(i.menu_level_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = menu_level_step &rArr; menu_draw_buttons &rArr; draw_button &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw_buttons
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_button_right_level
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_button_left_level
</UL>

<P><STRONG><a name="[ad]"></a>menu_select_button_by_step</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, menustate.o(i.menu_select_button_by_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = menu_select_button_by_step &rArr; menu_draw_buttons &rArr; draw_button &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw_buttons
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_state_input
</UL>

<P><STRONG><a name="[61]"></a>menu_state</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, menustate.o(i.menu_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = menu_state &rArr; sound_correct_key &rArr; speaker_squeak_hz &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sound_correct_key
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[5f]"></a>menu_state_changer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menustate.o(i.menu_state_changer))
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[5e]"></a>menu_state_input</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, menustate.o(i.menu_state_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = menu_state_input &rArr; menu_select_button_by_step &rArr; menu_draw_buttons &rArr; draw_button &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select_button_by_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[60]"></a>menu_state_start</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, menustate.o(i.menu_state_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = menu_state_start &rArr; menu_draw_buttons &rArr; draw_button &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw_buttons
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_free_mem
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_create
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_screen
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_message
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_image
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[c1]"></a>my_delay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, soundmanager.o(i.my_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_squeak_hz
</UL>

<P><STRONG><a name="[96]"></a>prein_ascii</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, lcd_ili9325.o(i.prein_ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_pixel
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASCIICode
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_message
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_button
</UL>

<P><STRONG><a name="[8b]"></a>random_number</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, applegenerator.o(i.random_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = random_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_create
</UL>

<P><STRONG><a name="[bd]"></a>set_direction</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, snakemovementstate.o(i.set_direction))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_input
</UL>

<P><STRONG><a name="[b3]"></a>snake_clear_previous</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, snakepart.o(i.snake_clear_previous))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = snake_clear_previous &rArr;  snake_clear_previous (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_image
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_clear_previous
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_update
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_clear_previous
</UL>

<P><STRONG><a name="[b9]"></a>snake_count</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, snakepart.o(i.snake_count))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_positions
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state
</UL>

<P><STRONG><a name="[b1]"></a>snake_create</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, snakepart.o(i.snake_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = snake_create &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_start
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_state_start
</UL>

<P><STRONG><a name="[b4]"></a>snake_draw</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, snakepart.o(i.snake_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = snake_draw &rArr; draw_image &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state
</UL>

<P><STRONG><a name="[b0]"></a>snake_free_mem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, snakepart.o(i.snake_free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = snake_free_mem &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_start
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_state_start
</UL>

<P><STRONG><a name="[b5]"></a>snake_grow</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, snakepart.o(i.snake_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = snake_grow &rArr; draw_image &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_image
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state
</UL>

<P><STRONG><a name="[b7]"></a>snake_has_collision</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, snakepart.o(i.snake_has_collision))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = snake_has_collision
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state
</UL>

<P><STRONG><a name="[5d]"></a>snake_movement_state</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, snakemovementstate.o(i.snake_movement_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = snake_movement_state &rArr; speaker_squeak_hz &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wall_has_collision
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_squeak_hz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_positions
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_has_collision
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_grow
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_draw
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_count
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_is_eaten
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_create
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_score_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[5b]"></a>snake_movement_state_changer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, snakemovementstate.o(i.snake_movement_state_changer))
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[5a]"></a>snake_movement_state_input</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, snakemovementstate.o(i.snake_movement_state_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = snake_movement_state_input
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_direction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[5c]"></a>snake_movement_state_start</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, snakemovementstate.o(i.snake_movement_state_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = snake_movement_state_start &rArr; snake_score_changed &rArr; draw_message &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wall_select_map
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wall_initialize
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wall_generate_map
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_positions
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_free_mem
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_count
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apple_create
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_score_changed
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_screen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statesystem.o(i.state_system_init)
</UL>
<P><STRONG><a name="[ba]"></a>snake_positions</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, snakepart.o(i.snake_positions))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = snake_positions &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_count
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state
</UL>

<P><STRONG><a name="[bc]"></a>snake_score_changed</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, snakemovementstate.o(i.snake_score_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = snake_score_changed &rArr; draw_message &rArr; prein_ascii &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_message
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_image
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_start
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state
</UL>

<P><STRONG><a name="[af]"></a>snake_update</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, snakepart.o(i.snake_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = snake_update &rArr; snake_clear_previous &rArr;  snake_clear_previous (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_image
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_clear_previous
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_state
</UL>

<P><STRONG><a name="[ae]"></a>sound_correct_key</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, soundmanager.o(i.sound_correct_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sound_correct_key &rArr; speaker_squeak_hz &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speaker_squeak_hz
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_state
</UL>

<P><STRONG><a name="[a5]"></a>speaker_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, soundmanager.o(i.speaker_init))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>speaker_squeak_hz</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, soundmanager.o(i.speaker_squeak_hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = speaker_squeak_hz &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sound_correct_key
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state
</UL>

<P><STRONG><a name="[a6]"></a>state_system_init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, statesystem.o(i.state_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = state_system_init &rArr; CreateState &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateState
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_state
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>state_system_input</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, statesystem.o(i.state_system_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = state_system_input &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>state_system_update</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, statesystem.o(i.state_system_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = state_system_update &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>wall_generate_map</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wallgenerator.o(i.wall_generate_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wall_generate_map &rArr; draw_image &rArr; lcd_set_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_image
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_start
</UL>

<P><STRONG><a name="[b6]"></a>wall_has_collision</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wallgenerator.o(i.wall_has_collision))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state
</UL>

<P><STRONG><a name="[be]"></a>wall_initialize</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wallgenerator.o(i.wall_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wall_initialize &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_start
</UL>

<P><STRONG><a name="[bf]"></a>wall_select_map</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wallgenerator.o(i.wall_select_map))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_movement_state_start
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9e]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_ili9325.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_lcd_init
</UL>

<P><STRONG><a name="[90]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_ili9325.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_lcd_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_lcd_reset
</UL>

<P><STRONG><a name="[8f]"></a>board_lcd_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_ili9325.o(i.board_lcd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = board_lcd_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd_ili9325
</UL>

<P><STRONG><a name="[a3]"></a>board_lcd_write_words</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, lcd_ili9325.o(i.board_lcd_write_words))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = board_lcd_write_words
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_color
</UL>

<P><STRONG><a name="[a0]"></a>bus_lcd_read_reg</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lcd_ili9325.o(i.bus_lcd_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bus_lcd_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd_ili9325
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bus_test
</UL>

<P><STRONG><a name="[a2]"></a>bus_lcd_write_reg</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lcd_ili9325.o(i.bus_lcd_write_reg))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_pixel
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_color
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd_ili9325
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_bus_test
</UL>

<P><STRONG><a name="[a1]"></a>lcd_bus_test</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd_ili9325.o(i.lcd_bus_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_bus_test &rArr; bus_lcd_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_write_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_lcd_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd_ili9325
</UL>

<P><STRONG><a name="[4f]"></a>cnt1ms</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, systickms.o(i.cnt1ms))
<BR>[Address Reference Count : 1]<UL><LI> systickms.o(i.Init_systickms)
</UL>
<P><STRONG><a name="[51]"></a>delayms</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, systickms.o(i.delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delayms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systickms.o(i.Init_systickms)
</UL>
<P><STRONG><a name="[50]"></a>readcounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systickms.o(i.readcounter))
<BR>[Address Reference Count : 1]<UL><LI> systickms.o(i.Init_systickms)
</UL>
<P><STRONG><a name="[52]"></a>readflag25ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systickms.o(i.readflag25ms))
<BR>[Address Reference Count : 1]<UL><LI> systickms.o(i.Init_systickms)
</UL>
<P><STRONG><a name="[53]"></a>readflag50ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systickms.o(i.readflag50ms))
<BR>[Address Reference Count : 1]<UL><LI> systickms.o(i.Init_systickms)
</UL>
<P><STRONG><a name="[9a]"></a>stdout_putchar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget_io.o(i.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[87]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>

<P><STRONG><a name="[55]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
